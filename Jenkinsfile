pipeline {
    agent any

    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['Smoke', 'Regression', 'Custom'],
            description: 'Choose test suite: Smoke, Regression or Custom test by name'
        )

        string(
            name: 'TEST_NAME',
            defaultValue: '',
            description: 'Enter full test class name or method (e.g. com.example.LoginTest or com.example.LoginTest.myMethod)'
        )

        booleanParam(
            name: 'CLEAN',
            defaultValue: true,
            description: 'Run gradle clean before tests'
        )
    }

    environment {
        JAVA_HOME = "/usr/lib/jvm/java-21-openjdk-amd64"
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def taskName
                    if (params.TEST_SUITE == "Custom" && params.TEST_NAME?.trim()) {
                        def tests = params.TEST_NAME.replaceAll('\\s', '')
                        taskName = "test --tests \"${tests}\""
                        echo "Running specific test(s): ${tests}"
                    } else if (params.TEST_SUITE == "Smoke") {
                        taskName = "test -Djunit.jupiter.tags=Smoke"
                        echo "Running all Smoke tests"
                    } else if (params.TEST_SUITE == "Regression") {
                        taskName = "test -Djunit.jupiter.tags=Regression"
                        echo "Running all Regression tests"
                    } else {
                        error "No test selected or TEST_NAME is empty for Custom"
                    }

                    def status = sh(
                        script: "./gradlew ${params.CLEAN ? 'clean ' : ''}${taskName} --no-daemon --info --continue",
                        returnStatus: true
                    )

                    currentBuild.result = (status == 0) ? 'SUCCESS' : 'UNSTABLE'
                }
            }
        }

        stage('Build Chart Generator') {
            steps {
                sh "./gradlew shadowJar"
            }
        }

    }

    post {
        always {
            script {
                // –ü—É–±–ª–∏–∫—É–µ–º Allure-–æ—Ç—á–µ—Ç. –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'build/reports/allure-report'
                allure([
                    includeProperties: true,
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'build/allure-results']]
                ])

                // –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã JUnit
                junit '**/build/test-results/test/TEST-*.xml'

                // –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª summary.json –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                if (fileExists('allure-report/widgets/summary.json')) {
                    def summary = readJSON file: 'allure-report/widgets/summary.json'

                    def total = summary.statistic.total
                    def passed = summary.statistic.passed
                    def failed = summary.statistic.failed
                    def broken = summary.statistic.broken
                    def skipped = summary.statistic.skipped

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    def messageText = """üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤*
üïí Duration: ${currentBuild.durationString.replace('and counting', '')}
üìå Total: ${total}
‚úÖ Passed: ${passed}
‚ùå Failed: ${failed}
üí• Broken: ${broken}
‚ö†Ô∏è Skipped: ${skipped}
üîó [Allure Report](${env.BUILD_URL}allure)
"""

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Jenkins Credentials –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É
                    withCredentials([string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'), string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')]) {

                        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à Java-–∫–æ–¥ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ JAR-—Ñ–∞–π–ª–∞
                        sh "java -jar build/libs/chart-generator.jar ${total} ${passed} ${failed} ${broken} ${skipped} chart.png"

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª —Å–æ–∑–¥–∞–Ω
                        if (fileExists('chart.png')) {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram
                            sh """
                                curl -s -X POST \
                                     -F "chat_id=${CHAT_ID}" \
                                     -F "photo=@chart.png" \
                                     -F "caption=${messageText}" \
                                     -F "parse_mode=Markdown" \
                                     "https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto"
                            """
                        } else {
                            echo "Chart.png not found, skipping Telegram photo notification."
                        }
                    }
                } else {
                    echo "Summary.json not found, skipping Telegram notification."
                }

                def reportDir = 'build/reports/tests/test'
                archiveArtifacts artifacts: "${reportDir}/**", allowEmptyArchive: true
            }
        }
    }
}